{"version":3,"sources":["actions/postActions.js","actions/types.js","components/Posts.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchPosts","dispatch","fetch","then","res","json","posts","type","payload","Posts","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","nextProps","newPost","unshift","map","post","react_default","a","createElement","id","title","body","Component","connect","state","items","item","bindActionCreators","PostForm","_this","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","preventDefault","createPosts","method","headers","content-type","JSON","stringify","initialState","combineReducers","length","undefined","action","objectSpread","middleWare","thunk","store","createStore","rootReducer","applyMiddleware","App","es","className","Postform","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6234288f.chunk.js","sourcesContent":["import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts => dispatch({\r\n            type: FETCH_POSTS,\r\n            payload: posts\r\n        }));\r\n}\r\n\r\nexport const createPosts = post => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(post)\r\n    })\r\n        .then(res => res.json())\r\n        .then(post => dispatch({\r\n            type: NEW_POST,\r\n            payload: post\r\n        }))\r\n}","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\n\r\nexport class Posts extends Component {\r\n    componentWillMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n    render() {\r\n        const posts = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                {posts}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n})\r\n\r\nfunction matchDispatchToProps(dispatch) {\r\n    return bindActionCreators({\r\n        fetchPosts\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(Posts);\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { createPosts } from '../actions/postActions'\r\n\r\nexport class PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        }\r\n        this.props.createPosts(post);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>PostForm</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label> Type:</label>\r\n                        <input name=\"title\" onChange={this.onChange} value={this.state.title} type=\"text\" />\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <label> Body:</label>\r\n                        <textarea onChange={this.onChange} value={this.state.body} name=\"body\" />\r\n                    </div>\r\n                    <br />\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// here imported action  itself is passed to connect function \r\nexport default connect(null, { createPosts })(PostForm);\r\n\r\n","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer'\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n// const store = createStore(()=>[],{},applyMiddleware);\r\n\r\nconst initialState = {};\r\nconst middleWare = [thunk];\r\nconst store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        applyMiddleware(...middleWare)\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Provider }  from 'react-redux';\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/Postform'\r\nimport store from './store'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store = {store}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <PostForm/>\r\n        <hr/>\r\n         <Posts/>\r\n        </header>\r\n      </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}